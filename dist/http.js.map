{"version":3,"file":"http.js","sourceRoot":"","sources":["../src/http.ts"],"names":[],"mappings":";;;AAAA,eAAe;AACF,QAAA,yBAAyB,GAAG;IACxC,gBAAgB;IAChB,GAAG,EAAE,UAAU;IACf,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,YAAY;IACjB,GAAG,EAAE,aAAa;IAClB,UAAU;IACV,GAAG,EAAE,IAAI;IACT,GAAG,EAAE,SAAS;IACd,GAAG,EAAE,UAAU;IACf,GAAG,EAAE,+BAA+B;IACpC,GAAG,EAAE,YAAY;IACjB,GAAG,EAAE,eAAe;IACpB,GAAG,EAAE,iBAAiB;IACtB,GAAG,EAAE,cAAc;IACnB,GAAG,EAAE,kBAAkB;IACvB,GAAG,EAAE,SAAS;IACd,cAAc;IACd,GAAG,EAAE,kBAAkB;IACvB,GAAG,EAAE,mBAAmB;IACxB,GAAG,EAAE,OAAO;IACZ,GAAG,EAAE,WAAW;IAChB,GAAG,EAAE,cAAc;IACnB,GAAG,EAAE,WAAW;IAChB,GAAG,EAAE,oBAAoB;IACzB,GAAG,EAAE,oBAAoB;IACzB,eAAe;IACf,GAAG,EAAE,aAAa;IAClB,GAAG,EAAE,cAAc;IACnB,GAAG,EAAE,kBAAkB;IACvB,GAAG,EAAE,WAAW;IAChB,GAAG,EAAE,WAAW;IAChB,GAAG,EAAE,oBAAoB;IACzB,GAAG,EAAE,gBAAgB;IACrB,GAAG,EAAE,+BAA+B;IACpC,GAAG,EAAE,iBAAiB;IACtB,GAAG,EAAE,UAAU;IACf,GAAG,EAAE,MAAM;IACX,GAAG,EAAE,iBAAiB;IACtB,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,mBAAmB;IACxB,GAAG,EAAE,cAAc;IACnB,GAAG,EAAE,wBAAwB;IAC7B,GAAG,EAAE,uBAAuB;IAC5B,GAAG,EAAE,oBAAoB;IACzB,GAAG,EAAE,cAAc;IACnB,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,sBAAsB;IAC3B,GAAG,EAAE,QAAQ;IACb,GAAG,EAAE,mBAAmB;IACxB,GAAG,EAAE,WAAW;IAChB,GAAG,EAAE,kBAAkB;IACvB,GAAG,EAAE,uBAAuB;IAC5B,GAAG,EAAE,mBAAmB;IACxB,GAAG,EAAE,iCAAiC;IACtC,GAAG,EAAE,+BAA+B;IACpC,eAAe;IACf,GAAG,EAAE,uBAAuB;IAC5B,GAAG,EAAE,iBAAiB;IACtB,GAAG,EAAE,aAAa;IAClB,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,iBAAiB;IACtB,GAAG,EAAE,4BAA4B;IACjC,GAAG,EAAE,yBAAyB;IAC9B,GAAG,EAAE,sBAAsB;IAC3B,GAAG,EAAE,eAAe;IACpB,GAAG,EAAE,cAAc;IACnB,GAAG,EAAE,iCAAiC;CAC7B,CAAC;AAEE,QAAA,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,iCAAyB,CAAC,CAAC,MAAM,CAC7E,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE;IACtB,MAAM,CAAC,iCAAyB,CAAC,UAAU,CAAC,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;IACnE,OAAO,MAAM,CAAC;AACf,CAAC,EACD,EAAE,CAC0C,CAAC;AAE9C,MAAM,WAAW,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,iCAAyB,CAAC,CAAU,CAAC;AAS3E;;;;GAIG;AACH,SAAgB,gBAAgB,CAAC,MAAkB;IAClD,IAAI,OAAO,MAAM,KAAK,QAAQ;QAAE,OAAO,MAAM,CAAC;IAC9C,OAAO,yBAAiB,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC;AAHD,4CAGC","sourcesContent":["// Status Codes\nexport const httpStatusCodesCollection = {\n\t// Informational\n\t100: `Continue`,\n\t101: `Switching Protocols`,\n\t102: `Processing`,\n\t103: `Early Hints`,\n\t// Success\n\t200: `OK`,\n\t201: `Created`,\n\t202: `Accepted`,\n\t203: `Non-Authoritative Information`,\n\t204: `No Content`,\n\t205: `Reset Content`,\n\t206: `Partial Content`,\n\t207: `Multi-Status`,\n\t208: `Already Reported`,\n\t226: `IM Used`,\n\t// Redirection\n\t300: `Multiple Choices`,\n\t301: `Moved Permanently`,\n\t302: `Found`,\n\t303: `See Other`,\n\t304: `Not Modified`,\n\t305: `Use Proxy`,\n\t307: `Temporary Redirect`,\n\t308: `Permanent Redirect`,\n\t// Client Error\n\t400: `Bad Request`,\n\t401: `Unauthorized`,\n\t402: `Payment Required`,\n\t403: `Forbidden`,\n\t404: `Not Found`,\n\t405: `Method Not Allowed`,\n\t406: `Not Acceptable`,\n\t407: `Proxy Authentication Required`,\n\t408: `Request Timeout`,\n\t409: `Conflict`,\n\t410: `Gone`,\n\t411: `Length Required`,\n\t412: `Precondition Failed`,\n\t413: `Payload Too Large`,\n\t414: `URI Too Long`,\n\t415: `Unsupported Media Type`,\n\t416: `Range Not Satisfiable`,\n\t417: `Expectation Failed`,\n\t418: `I'm a teapot`,\n\t421: `Misdirected Request`,\n\t422: `Unprocessable Entity`,\n\t423: `Locked`,\n\t424: `Failed Dependency`,\n\t425: `Too Early`,\n\t426: `Upgrade Required`,\n\t428: `Precondition Required`,\n\t429: `Too Many Requests`,\n\t431: `Request Header Fields Too Large`,\n\t432: `Unavailable For Legal Reasons`,\n\t// Server Error\n\t500: `Internal Server Error`,\n\t501: `Not Implemented`,\n\t502: `Bad Gateway`,\n\t503: `Service Unavailable`,\n\t504: `Gateway Timeout`,\n\t505: `HTTP Version Not Supported`,\n\t506: `Variant Also Negotiates`,\n\t507: `Insufficient Storage`,\n\t508: `Loop Detected`,\n\t510: `Not Extended`,\n\t511: `Network Authentication Required`,\n} as const;\n\nexport const httpStatusCodeMap = Object.keys(httpStatusCodesCollection).reduce(\n\t(result, currentKey) => {\n\t\tresult[httpStatusCodesCollection[currentKey]] = Number(currentKey);\n\t\treturn result;\n\t},\n\t{}\n) as Record<HttpStatusNames, HttpStatusCodes>;\n\nconst statusCodes = [...Object.values(httpStatusCodesCollection)] as const;\n\nexport type HttpStatusCodes = keyof typeof httpStatusCodesCollection;\nexport type HttpStatusNames = typeof statusCodes[number];\n\nexport type HttpStatus = HttpStatusNames | HttpStatusCodes;\n\nexport type HttpMethod = 'GET' | 'POST' | 'PATCH' | 'PUT' | 'DELETE';\n\n/**\n * Converts a status to it's number format\n * @param status HTTP status\n * @returns HTTP status as number\n */\nexport function codifyHttpStatus(status: HttpStatus): HttpStatusCodes {\n\tif (typeof status === 'number') return status;\n\treturn httpStatusCodeMap[status];\n}\n"]}